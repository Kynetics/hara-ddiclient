/*
 * Copyright Â© 2017-2019 Kynetics LLC
 *
 *  All rights reserved. This program and the accompanying materials
 *  are made available under the terms of the Eclipse Public License v1.0
 *  which accompanies this distribution, and is available at
 *  http://www.eclipse.org/legal/epl-v10.html
 *
 */

plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.3.21'
    id "io.gitlab.arturbosch.detekt" version "1.0.0-RC16"
}

repositories {
    mavenCentral()
    jcenter()
}

final def deps = gradle.settings.app_dependencies
final def tdeps = gradle.settings.test_dependencies
final def app_version = '1.0.0-rc3'


subprojects {
    apply plugin: 'org.jetbrains.kotlin.jvm'
    apply plugin: 'maven'
    apply from: "$rootDir/ktlint.gradle"

    repositories {
        mavenCentral()
        mavenLocal()
    }
    dependencies {
        implementation deps.kotlin_stdlib
        implementation deps.kotlin_x
        //runtime deps.kotlin_compiler
    }
}

project(':ddiapi-client') {
    group 'com.kynetics.updatefactory.uf-ddiclient'
    version app_version

    final def subprj = ':ddiapi-client:ddiapi-client-api'
    dependencies {
        implementation project(subprj)
        implementation project(':core:core-api')
        implementation deps.retrofit_converter
    }
    allprojects {
        dependencies {
            implementation deps.okhttp
            implementation deps.retrofit
            implementation deps.retrofit_coroutines
            implementation deps.slf4j_api

        }
    }
    project(subprj) {
        dependencies {
            implementation deps.gson
            testCompile tdeps.testng
        }
        test {
            useTestNG()
        }

    }
}

project(':ddiapi-client:ddiapi-client-api') {
    group 'com.kynetics.updatefactory.uf-ddiclient.ddiapi-client'
    version app_version

    dependencies {
        implementation deps.joda
    }
}

project(':core') {
    group 'com.kynetics.updatefactory.uf-ddiclient'
    version app_version

    dependencies {
        implementation project(':core:core-api')
        implementation project(':ddiapi-client')
        implementation project(':ddiapi-client:ddiapi-client-api')
        implementation deps.slf4j_api
        implementation deps.slf4j_simple
        implementation deps.joda
        //implementation deps.retrofit

        implementation deps.gson
        testCompile tdeps.testng
        testCompile deps.okhttp
        testCompile deps.retrofit
        testCompile deps.retrofit_coroutines
        testCompile deps.retrofit_converter

    }
    
    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
        kotlinOptions.freeCompilerArgs += ["-Xuse-experimental=kotlin.Experimental"]
    }

    test {
        useTestNG()

        afterTest { desc, result ->
            logger.quiet "Executing test ${desc.name} [${desc.className}] with result: ${result.resultType}"
        }
    }

    task restartUfServer() {
        group 'testing'
        doLast {

            exec {
                workingDir '../docker/test/'
                commandLine 'docker-compose', 'down'
            }


            "docker-compose up".execute(new String[0], new File(projectDir, "../docker/test") )

        }

    }

    task waitingUFServer(){
        group 'testing'

        dependsOn 'restartUfServer'

        doFirst {
            def url = 'http://localhost:8081/health'
            println "Waiting for ${url} ..."
            while (!doHead(url)) {
                sleep(5000)
                println "Waiting for ${url} ..."
            }
            println "${url} is up!"
        }

    }

    test.dependsOn waitingUFServer
    test.dependsOn cleanTest

}

project(':core:core-api') {
    group 'com.kynetics.updatefactory.uf-ddiclient.core'
    version app_version
}


boolean doHead(url) {
    def connection = new URL(url).openConnection()
    connection.requestMethod = 'HEAD'
    try {
        connection.responseCode == 200
    } catch (IOException error) {
        false
    }
}

task copyClientSideGitHooks(type:Copy, group: "git-hooks"){
    description 'Copies the git hooks from git-hooks to the .git folder.'
    doFirst{
        project.fileTree("git-hooks").visit { FileVisitDetails details ->
            if(details.name.endsWith(".sh")){
                def name = details.name.substring(0, details.name.lastIndexOf(".sh"))
                def file = file("${projectDir}/.git/hooks/${name}")
                if(file.exists()){
                    ant.fail("${file.path} file already exists")
                }
            }

        }
    }
    from("${rootDir}/git-hooks/") {
        include '**/*.sh'
        rename '(.*).sh', '$1'
    }
    into "${rootDir}/.git/hooks"
    outputs.upToDateWhen { false }
}

task installClientSideGitHooks(type: Exec, group: "git-hooks") {
    description 'Installs the client-side git hooks'
    commandLine 'chmod'
    args '-R', '+x', '.git/hooks/'
    dependsOn copyClientSideGitHooks
    doLast {
        println('Git hook installed successfully.')
    }
}

detekt {
    config = files("$rootDir/default-detekt-config.yml", "$rootDir/detekt-config.yml")
    toolVersion = "1.0.0-RC16"
    input = files("$projectDir")
    filters = ".*/resources/.*,.*/build/.*"
}